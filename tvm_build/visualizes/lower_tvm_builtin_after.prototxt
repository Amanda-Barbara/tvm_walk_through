name : "prim_expr"
layer {
  name:"stack_tcode"
  type:"var(var)"
  top:"stack_tcode"
  layer_param {
    idx:0
    dtype:handle
  }
}
layer {
  name:"Node_1"
  type:"tir_tvm_stack_alloca(value)"
  top:"Node_1"
  layer_param {
    idx:1
    body:"@tir.tvm_stack_alloca('arg_tcode', 8, dtype=handle)"
  }
}
layer {
  name:"stack_value"
  type:"var(var)"
  top:"stack_value"
  layer_param {
    idx:2
    dtype:handle
  }
}
layer {
  name:"Node_3"
  type:"tir_tvm_stack_alloca(value)"
  top:"Node_3"
  layer_param {
    idx:3
    body:"@tir.tvm_stack_alloca('arg_value', 8, dtype=handle)"
  }
}
layer {
  name:"arg0"
  type:"var(var)"
  top:"arg0"
  layer_param {
    idx:4
    dtype:handle
  }
}
layer {
  name:"Node_5"
  type:"tir_tvm_struct_get(value)"
  top:"Node_5"
  layer_param {
    idx:5
    body:"@tir.tvm_struct_get(args: handle, 0, 12, dtype=handle)"
  }
}
layer {
  name:"arg0.code"
  type:"var(var)"
  top:"arg0.code"
  layer_param {
    idx:6
    dtype:int32
  }
}
layer {
  name:"arg_type_ids"
  type:"var(load_buffer)"
  top:"arg_type_ids"
  layer_param {
    idx:7
    dtype:handle
  }
}
layer {
  name:"Node_8"
  type:"int(load_index)"
  top:"Node_8"
  layer_param {
    idx:8
    value:0
    dtype:int32
  }
}
layer {
  name:"Node_9"
  type:"load(value)"
  top:"Node_9"
  bottom:"arg_type_ids"
  bottom:"Node_8"
  layer_param {
    idx:9
    predicate:"True"
    body:"(int32*)arg_type_ids: handle[0]"
  }
}
layer {
  name:"arg1"
  type:"var(var)"
  top:"arg1"
  layer_param {
    idx:10
    dtype:handle
  }
}
layer {
  name:"Node_11"
  type:"tir_tvm_struct_get(value)"
  top:"Node_11"
  layer_param {
    idx:11
    body:"@tir.tvm_struct_get(args: handle, 1, 12, dtype=handle)"
  }
}
layer {
  name:"arg1.code"
  type:"var(var)"
  top:"arg1.code"
  layer_param {
    idx:12
    dtype:int32
  }
}
layer {
  name:"Node_13"
  type:"int(load_index)"
  top:"Node_13"
  layer_param {
    idx:13
    value:1
    dtype:int32
  }
}
layer {
  name:"Node_14"
  type:"load(value)"
  top:"Node_14"
  bottom:"arg_type_ids"
  bottom:"Node_13"
  layer_param {
    idx:14
    predicate:"True"
    body:"(int32*)arg_type_ids: handle[1]"
  }
}
layer {
  name:"arg2"
  type:"var(var)"
  top:"arg2"
  layer_param {
    idx:15
    dtype:handle
  }
}
layer {
  name:"Node_16"
  type:"tir_tvm_struct_get(value)"
  top:"Node_16"
  layer_param {
    idx:16
    body:"@tir.tvm_struct_get(args: handle, 2, 12, dtype=handle)"
  }
}
layer {
  name:"arg2.code"
  type:"var(var)"
  top:"arg2.code"
  layer_param {
    idx:17
    dtype:int32
  }
}
layer {
  name:"Node_18"
  type:"int(load_index)"
  top:"Node_18"
  layer_param {
    idx:18
    value:2
    dtype:int32
  }
}
layer {
  name:"Node_19"
  type:"load(value)"
  top:"Node_19"
  bottom:"arg_type_ids"
  bottom:"Node_18"
  layer_param {
    idx:19
    predicate:"True"
    body:"(int32*)arg_type_ids: handle[2]"
  }
}
layer {
  name:"arg3"
  type:"var(var)"
  top:"arg3"
  layer_param {
    idx:20
    dtype:handle
  }
}
layer {
  name:"Node_21"
  type:"tir_tvm_struct_get(value)"
  top:"Node_21"
  layer_param {
    idx:21
    body:"@tir.tvm_struct_get(args: handle, 3, 12, dtype=handle)"
  }
}
layer {
  name:"arg3.code"
  type:"var(var)"
  top:"arg3.code"
  layer_param {
    idx:22
    dtype:int32
  }
}
layer {
  name:"Node_23"
  type:"int(load_index)"
  top:"Node_23"
  layer_param {
    idx:23
    value:3
    dtype:int32
  }
}
layer {
  name:"Node_24"
  type:"load(value)"
  top:"Node_24"
  bottom:"arg_type_ids"
  bottom:"Node_23"
  layer_param {
    idx:24
    predicate:"True"
    body:"(int32*)arg_type_ids: handle[3]"
  }
}
layer {
  name:"placeholder"
  type:"var(var)"
  top:"placeholder"
  layer_param {
    idx:25
    dtype:handle
  }
}
layer {
  name:"Node_26"
  type:"tir_tvm_struct_get(value)"
  top:"Node_26"
  layer_param {
    idx:26
    body:"@tir.tvm_struct_get(arg0: handle, 0, 1, dtype=handle)"
  }
}
layer {
  name:"arg0.shape"
  type:"var(var)"
  top:"arg0.shape"
  layer_param {
    idx:27
    dtype:handle
  }
}
layer {
  name:"Node_28"
  type:"tir_tvm_struct_get(value)"
  top:"Node_28"
  layer_param {
    idx:28
    body:"@tir.tvm_struct_get(arg0: handle, 0, 2, dtype=handle)"
  }
}
layer {
  name:"arg0.strides"
  type:"var(var)"
  top:"arg0.strides"
  layer_param {
    idx:29
    dtype:handle
  }
}
layer {
  name:"Node_30"
  type:"tir_tvm_struct_get(value)"
  top:"Node_30"
  layer_param {
    idx:30
    body:"@tir.tvm_struct_get(arg0: handle, 0, 3, dtype=handle)"
  }
}
layer {
  name:"dev_id"
  type:"var(var)"
  top:"dev_id"
  layer_param {
    idx:31
    dtype:int32
  }
}
layer {
  name:"Node_32"
  type:"tir_tvm_struct_get(value)"
  top:"Node_32"
  layer_param {
    idx:32
    body:"@tir.tvm_struct_get(arg0: handle, 0, 9, dtype=int32)"
  }
}
layer {
  name:"placeholder_1"
  type:"var(var)"
  top:"placeholder_1"
  layer_param {
    idx:33
    dtype:handle
  }
}
layer {
  name:"Node_34"
  type:"tir_tvm_struct_get(value)"
  top:"Node_34"
  layer_param {
    idx:34
    body:"@tir.tvm_struct_get(arg1: handle, 0, 1, dtype=handle)"
  }
}
layer {
  name:"arg1.shape"
  type:"var(var)"
  top:"arg1.shape"
  layer_param {
    idx:35
    dtype:handle
  }
}
layer {
  name:"Node_36"
  type:"tir_tvm_struct_get(value)"
  top:"Node_36"
  layer_param {
    idx:36
    body:"@tir.tvm_struct_get(arg1: handle, 0, 2, dtype=handle)"
  }
}
layer {
  name:"arg1.strides"
  type:"var(var)"
  top:"arg1.strides"
  layer_param {
    idx:37
    dtype:handle
  }
}
layer {
  name:"Node_38"
  type:"tir_tvm_struct_get(value)"
  top:"Node_38"
  layer_param {
    idx:38
    body:"@tir.tvm_struct_get(arg1: handle, 0, 3, dtype=handle)"
  }
}
layer {
  name:"placeholder_2"
  type:"var(var)"
  top:"placeholder_2"
  layer_param {
    idx:39
    dtype:handle
  }
}
layer {
  name:"Node_40"
  type:"tir_tvm_struct_get(value)"
  top:"Node_40"
  layer_param {
    idx:40
    body:"@tir.tvm_struct_get(arg2: handle, 0, 1, dtype=handle)"
  }
}
layer {
  name:"arg2.shape"
  type:"var(var)"
  top:"arg2.shape"
  layer_param {
    idx:41
    dtype:handle
  }
}
layer {
  name:"Node_42"
  type:"tir_tvm_struct_get(value)"
  top:"Node_42"
  layer_param {
    idx:42
    body:"@tir.tvm_struct_get(arg2: handle, 0, 2, dtype=handle)"
  }
}
layer {
  name:"arg2.strides"
  type:"var(var)"
  top:"arg2.strides"
  layer_param {
    idx:43
    dtype:handle
  }
}
layer {
  name:"Node_44"
  type:"tir_tvm_struct_get(value)"
  top:"Node_44"
  layer_param {
    idx:44
    body:"@tir.tvm_struct_get(arg2: handle, 0, 3, dtype=handle)"
  }
}
layer {
  name:"T_add"
  type:"var(var)"
  top:"T_add"
  layer_param {
    idx:45
    dtype:handle
  }
}
layer {
  name:"Node_46"
  type:"tir_tvm_struct_get(value)"
  top:"Node_46"
  layer_param {
    idx:46
    body:"@tir.tvm_struct_get(arg3: handle, 0, 1, dtype=handle)"
  }
}
layer {
  name:"arg3.shape"
  type:"var(var)"
  top:"arg3.shape"
  layer_param {
    idx:47
    dtype:handle
  }
}
layer {
  name:"Node_48"
  type:"tir_tvm_struct_get(value)"
  top:"Node_48"
  layer_param {
    idx:48
    body:"@tir.tvm_struct_get(arg3: handle, 0, 2, dtype=handle)"
  }
}
layer {
  name:"arg3.strides"
  type:"var(var)"
  top:"arg3.strides"
  layer_param {
    idx:49
    dtype:handle
  }
}
layer {
  name:"Node_50"
  type:"tir_tvm_struct_get(value)"
  top:"Node_50"
  layer_param {
    idx:50
    body:"@tir.tvm_struct_get(arg3: handle, 0, 3, dtype=handle)"
  }
}
layer {
  name:"Node_51"
  type:"evaluate"
  top:"Node_51"
  bottom:"Node_8"
  layer_param {
    idx:51
  }
}
layer {
  name:"Node_52"
  type:"assert(true)"
  top:"Node_52"
  bottom:"Node_51"
  layer_param {
    idx:52
    condition:"((1 == cast(int32, (int64*)arg0.strides: handle[1])) && (512 == cast(int32, (int64*)arg0.strides[0])))"
    message:"'arg0.strides: expected to be compact array'"
  }
}
layer {
  name:"Node_53"
  type:"ifthenelse(seq_0)"
  top:"Node_53"
  bottom:"Node_52"
  layer_param {
    idx:53
    condition:"!@tir.isnullptr(arg0.strides: handle, dtype=bool)"
  }
}
layer {
  name:"Node_54"
  type:"evaluate"
  top:"Node_54"
  bottom:"Node_8"
  layer_param {
    idx:54
  }
}
layer {
  name:"Node_55"
  type:"assert(true)"
  top:"Node_55"
  bottom:"Node_54"
  layer_param {
    idx:55
    condition:"((1 == cast(int32, (int64*)arg1.strides: handle[1])) && (512 == cast(int32, (int64*)arg1.strides[0])))"
    message:"'arg1.strides: expected to be compact array'"
  }
}
layer {
  name:"Node_56"
  type:"ifthenelse(seq_0)"
  top:"Node_56"
  bottom:"Node_55"
  layer_param {
    idx:56
    condition:"!@tir.isnullptr(arg1.strides: handle, dtype=bool)"
  }
}
layer {
  name:"Node_57"
  type:"evaluate"
  top:"Node_57"
  bottom:"Node_8"
  layer_param {
    idx:57
  }
}
layer {
  name:"Node_58"
  type:"assert(true)"
  top:"Node_58"
  bottom:"Node_57"
  layer_param {
    idx:58
    condition:"(1 == cast(int32, (int64*)arg2.strides: handle[0]))"
    message:"'arg2.strides: expected to be compact array'"
  }
}
layer {
  name:"Node_59"
  type:"ifthenelse(seq_0)"
  top:"Node_59"
  bottom:"Node_58"
  layer_param {
    idx:59
    condition:"!@tir.isnullptr(arg2.strides: handle, dtype=bool)"
  }
}
layer {
  name:"Node_60"
  type:"evaluate"
  top:"Node_60"
  bottom:"Node_8"
  layer_param {
    idx:60
  }
}
layer {
  name:"Node_61"
  type:"assert(true)"
  top:"Node_61"
  bottom:"Node_60"
  layer_param {
    idx:61
    condition:"((1 == cast(int32, (int64*)arg3.strides: handle[1])) && (1000 == cast(int32, (int64*)arg3.strides[0])))"
    message:"'arg3.strides: expected to be compact array'"
  }
}
layer {
  name:"Node_62"
  type:"ifthenelse(seq_0)"
  top:"Node_62"
  bottom:"Node_61"
  layer_param {
    idx:62
    condition:"!@tir.isnullptr(arg3.strides: handle, dtype=bool)"
  }
}
layer {
  name:"Node_63"
  type:"tir_tvm_struct_set(value)"
  top:"Node_63"
  layer_param {
    idx:63
    body:"@tir.tvm_struct_set(stack_value: handle, 0, 12, cast(int64, 2), dtype=int32)"
  }
}
layer {
  name:"Node_64"
  type:"evaluate(seq_0)"
  top:"Node_64"
  bottom:"Node_63"
  layer_param {
    idx:64
  }
}
layer {
  name:"Node_65"
  type:"store(seq_1)"
  top:"Node_65"
  bottom:"stack_tcode"
  bottom:"Node_8"
  bottom:"Node_8"
  layer_param {
    idx:65
    predicate:"True"
    value:"0"
    index:"0"
    body_:"stack_tcode[0] = 0"
  }
}
layer {
  name:"Node_66"
  type:"tir_tvm_struct_set(value)"
  top:"Node_66"
  layer_param {
    idx:66
    body:"@tir.tvm_struct_set(stack_value: handle, 1, 12, cast(int64, dev_id: int32), dtype=int32)"
  }
}
layer {
  name:"Node_67"
  type:"evaluate(seq_2)"
  top:"Node_67"
  bottom:"Node_66"
  layer_param {
    idx:67
  }
}
layer {
  name:"Node_68"
  type:"store(seq_3)"
  top:"Node_68"
  bottom:"stack_tcode"
  bottom:"Node_8"
  bottom:"Node_13"
  layer_param {
    idx:68
    predicate:"True"
    value:"0"
    index:"1"
    body_:"stack_tcode[1] = 0"
  }
}
layer {
  name:"Node_69"
  type:"tir_tvm_call_packed_lowered(value)"
  top:"Node_69"
  layer_param {
    idx:69
    body:"@tir.tvm_call_packed_lowered('__tvm_set_device', stack_value: handle, stack_tcode: handle, 0, 2, dtype=int32)"
  }
}
layer {
  name:"Node_70"
  type:"evaluate(seq_4)"
  top:"Node_70"
  bottom:"Node_69"
  layer_param {
    idx:70
  }
}
layer {
  name:"Node_71"
  type:"seq(seq_0)"
  top:"Node_71"
  bottom:"Node_64"
  bottom:"Node_65"
  bottom:"Node_67"
  bottom:"Node_68"
  bottom:"Node_70"
  layer_param {
    idx:71
    seq_00:"[tir.tvm_struct_set(stack_value, 0, 12, int64(2))"
    seq_01:" , stack_tcode[0] = 0"
    seq_02:"  , tir.tvm_struct_set(stack_value, 1, 12, int64(dev_id))"
    seq_03:"   , stack_tcode[1] = 0"
    seq_04:"    , tir.tvm_call_packed_lowered('__tvm_set_device', stack_value, stack_tcode, 0, 2)"
    seq_05:"     ]"
  }
}
layer {
  name:"Node_72"
  type:"tir_tvm_struct_set(value)"
  top:"Node_72"
  layer_param {
    idx:72
    body:"@tir.tvm_struct_set(stack_value: handle, 0, 12, placeholder: Pointer(float32), dtype=int32)"
  }
}
layer {
  name:"Node_73"
  type:"evaluate(seq_0)"
  top:"Node_73"
  bottom:"Node_72"
  layer_param {
    idx:73
  }
}
layer {
  name:"Node_74"
  type:"store(seq_1)"
  top:"Node_74"
  bottom:"stack_tcode"
  bottom:"Node_23"
  bottom:"Node_8"
  layer_param {
    idx:74
    predicate:"True"
    value:"3"
    index:"0"
    body_:"stack_tcode[0] = 3"
  }
}
layer {
  name:"Node_75"
  type:"tir_tvm_struct_set(value)"
  top:"Node_75"
  layer_param {
    idx:75
    body:"@tir.tvm_struct_set(stack_value: handle, 1, 12, placeholder: Pointer(float32), dtype=int32)"
  }
}
layer {
  name:"Node_76"
  type:"evaluate(seq_2)"
  top:"Node_76"
  bottom:"Node_75"
  layer_param {
    idx:76
  }
}
layer {
  name:"Node_77"
  type:"store(seq_3)"
  top:"Node_77"
  bottom:"stack_tcode"
  bottom:"Node_23"
  bottom:"Node_13"
  layer_param {
    idx:77
    predicate:"True"
    value:"3"
    index:"1"
    body_:"stack_tcode[1] = 3"
  }
}
layer {
  name:"Node_78"
  type:"tir_tvm_struct_set(value)"
  top:"Node_78"
  layer_param {
    idx:78
    body:"@tir.tvm_struct_set(stack_value: handle, 2, 12, T_add: Pointer(float32), dtype=int32)"
  }
}
layer {
  name:"Node_79"
  type:"evaluate(seq_4)"
  top:"Node_79"
  bottom:"Node_78"
  layer_param {
    idx:79
  }
}
layer {
  name:"Node_80"
  type:"store(seq_5)"
  top:"Node_80"
  bottom:"stack_tcode"
  bottom:"Node_23"
  bottom:"Node_18"
  layer_param {
    idx:80
    predicate:"True"
    value:"3"
    index:"2"
    body_:"stack_tcode[2] = 3"
  }
}
layer {
  name:"Node_81"
  type:"tir_tvm_struct_set(value)"
  top:"Node_81"
  layer_param {
    idx:81
    body:"@tir.tvm_struct_set(stack_value: handle, 3, 12, placeholder: Pointer(float32), dtype=int32)"
  }
}
layer {
  name:"Node_82"
  type:"evaluate(seq_6)"
  top:"Node_82"
  bottom:"Node_81"
  layer_param {
    idx:82
  }
}
layer {
  name:"Node_83"
  type:"store(seq_7)"
  top:"Node_83"
  bottom:"stack_tcode"
  bottom:"Node_23"
  bottom:"Node_23"
  layer_param {
    idx:83
    predicate:"True"
    value:"3"
    index:"3"
    body_:"stack_tcode[3] = 3"
  }
}
layer {
  name:"Node_84"
  type:"tir_tvm_struct_set(value)"
  top:"Node_84"
  layer_param {
    idx:84
    body:"@tir.tvm_struct_set(stack_value: handle, 4, 12, cast(int64, 1), dtype=int32)"
  }
}
layer {
  name:"Node_85"
  type:"evaluate(seq_8)"
  top:"Node_85"
  bottom:"Node_84"
  layer_param {
    idx:85
  }
}
layer {
  name:"Node_86"
  type:"int(store_index)"
  top:"Node_86"
  layer_param {
    idx:86
    value:4
    dtype:int32
  }
}
layer {
  name:"Node_87"
  type:"store(seq_9)"
  top:"Node_87"
  bottom:"stack_tcode"
  bottom:"Node_8"
  bottom:"Node_86"
  layer_param {
    idx:87
    predicate:"True"
    value:"0"
    index:"4"
    body_:"stack_tcode[4] = 0"
  }
}
layer {
  name:"Node_88"
  type:"tir_tvm_struct_set(value)"
  top:"Node_88"
  layer_param {
    idx:88
    body:"@tir.tvm_struct_set(stack_value: handle, 5, 12, cast(int64, 1000), dtype=int32)"
  }
}
layer {
  name:"Node_89"
  type:"evaluate(seq_10)"
  top:"Node_89"
  bottom:"Node_88"
  layer_param {
    idx:89
  }
}
layer {
  name:"Node_90"
  type:"int(store_index)"
  top:"Node_90"
  layer_param {
    idx:90
    value:5
    dtype:int32
  }
}
layer {
  name:"Node_91"
  type:"store(seq_11)"
  top:"Node_91"
  bottom:"stack_tcode"
  bottom:"Node_8"
  bottom:"Node_90"
  layer_param {
    idx:91
    predicate:"True"
    value:"0"
    index:"5"
    body_:"stack_tcode[5] = 0"
  }
}
layer {
  name:"Node_92"
  type:"tir_tvm_struct_set(value)"
  top:"Node_92"
  layer_param {
    idx:92
    body:"@tir.tvm_struct_set(stack_value: handle, 6, 12, cast(int64, 64), dtype=int32)"
  }
}
layer {
  name:"Node_93"
  type:"evaluate(seq_12)"
  top:"Node_93"
  bottom:"Node_92"
  layer_param {
    idx:93
  }
}
layer {
  name:"Node_94"
  type:"int(store_index)"
  top:"Node_94"
  layer_param {
    idx:94
    value:6
    dtype:int32
  }
}
layer {
  name:"Node_95"
  type:"store(seq_13)"
  top:"Node_95"
  bottom:"stack_tcode"
  bottom:"Node_8"
  bottom:"Node_94"
  layer_param {
    idx:95
    predicate:"True"
    value:"0"
    index:"6"
    body_:"stack_tcode[6] = 0"
  }
}
layer {
  name:"Node_96"
  type:"tir_tvm_call_packed_lowered(value)"
  top:"Node_96"
  layer_param {
    idx:96
    body:"@tir.tvm_call_packed_lowered('fused_nn_dense_add_kernel0', stack_value: handle, stack_tcode: handle, 0, 7, dtype=int32)"
  }
}
layer {
  name:"Node_97"
  type:"evaluate(seq_14)"
  top:"Node_97"
  bottom:"Node_96"
  layer_param {
    idx:97
  }
}
layer {
  name:"Node_98"
  type:"seq"
  top:"Node_98"
  bottom:"Node_73"
  bottom:"Node_74"
  bottom:"Node_76"
  bottom:"Node_77"
  bottom:"Node_79"
  bottom:"Node_80"
  bottom:"Node_82"
  bottom:"Node_83"
  bottom:"Node_85"
  bottom:"Node_87"
  bottom:"Node_89"
  bottom:"Node_91"
  bottom:"Node_93"
  bottom:"Node_95"
  bottom:"Node_97"
  layer_param {
    idx:98
    seq_00:"[tir.tvm_struct_set(stack_value, 0, 12, placeholder)"
    seq_01:" , stack_tcode[0] = 3"
    seq_02:"  , tir.tvm_struct_set(stack_value, 1, 12, placeholder)"
    seq_03:"   , stack_tcode[1] = 3"
    seq_04:"    , tir.tvm_struct_set(stack_value, 2, 12, T_add)"
    seq_05:"     , stack_tcode[2] = 3"
    seq_06:"      , tir.tvm_struct_set(stack_value, 3, 12, placeholder)"
    seq_07:"       , stack_tcode[3] = 3"
    seq_08:"        , tir.tvm_struct_set(stack_value, 4, 12, int64(1))"
    seq_09:"         , stack_tcode[4] = 0"
  }
}
layer {
  name:"Node_99"
  type:"attribute(seq_1)"
  top:"Node_99"
  bottom:"Node_8"
  bottom:"Node_98"
  layer_param {
    idx:99
    attr_key:compute_scope
    body_00:"tir.tvm_struct_set(stack_value, 0, 12, placeholder)"
    body_01:" stack_tcode[0] = 3"
    body_02:"  tir.tvm_struct_set(stack_value, 1, 12, placeholder)"
    body_03:"   stack_tcode[1] = 3"
    body_04:"    tir.tvm_struct_set(stack_value, 2, 12, T_add)"
    body_05:"     stack_tcode[2] = 3"
    body_06:"      tir.tvm_struct_set(stack_value, 3, 12, placeholder)"
    body_07:"       stack_tcode[3] = 3"
    body_08:"        tir.tvm_struct_set(stack_value, 4, 12, int64(1))"
    body_09:"         stack_tcode[4] = 0"
    value:"'fused_nn_dense_add_compute_'"
  }
}
layer {
  name:"Node_100"
  type:"seq"
  top:"Node_100"
  bottom:"Node_71"
  bottom:"Node_99"
  layer_param {
    idx:100
    seq_00:"[tir.tvm_struct_set(stack_value, 0, 12, int64(2))"
    seq_01:" stack_tcode[0] = 0"
    seq_02:"  tir.tvm_struct_set(stack_value, 1, 12, int64(dev_id))"
    seq_03:"   stack_tcode[1] = 0"
    seq_04:"    tir.tvm_call_packed_lowered('__tvm_set_device', stack_value, stack_tcode, 0, 2)"
    seq_05:"     , // attr [0] compute_scope = 'fused_nn_dense_add_compute_'"
    seq_06:"      tir.tvm_struct_set(stack_value, 0, 12, placeholder)"
    seq_07:"       stack_tcode[0] = 3"
    seq_08:"        tir.tvm_struct_set(stack_value, 1, 12, placeholder)"
    seq_09:"         stack_tcode[1] = 3"
  }
}
layer {
  name:"Node_101"
  type:"assert"
  top:"Node_101"
  bottom:"Node_100"
  layer_param {
    idx:101
    condition:"(dev_id: int32 == @tir.tvm_struct_get(arg3: handle, 0, 9, dtype=int32))"
    message:"'Argument arg3.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg3, 0, 9))'"
  }
}
layer {
  name:"Node_102"
  type:"assert"
  top:"Node_102"
  bottom:"Node_101"
  layer_param {
    idx:102
    condition:"(2 == @tir.tvm_struct_get(arg3: handle, 0, 10, dtype=int32))"
    message:"'Argument arg3.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg3, 0, 10))'"
  }
}
layer {
  name:"Node_103"
  type:"assert(seq_1)"
  top:"Node_103"
  bottom:"Node_102"
  layer_param {
    idx:103
    condition:"(0u64 == @tir.tvm_struct_get(arg3: handle, 0, 8, dtype=uint64))"
    message:"'Argument arg3.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg3, 0, 8))'"
  }
}
layer {
  name:"Node_104"
  type:"seq"
  top:"Node_104"
  bottom:"Node_62"
  bottom:"Node_103"
  layer_param {
    idx:104
    seq_00:"[if (!tir.isnullptr(arg3.strides))"
    seq_01:" assert(((1 == int32(arg3.strides[1])) && (1000 == int32(arg3.strides[0]))), 'arg3.strides: expected to be compact array')"
    seq_02:"  0"
    seq_03:"   , assert(((uint64)0 == tir.tvm_struct_get(arg3, 0, 8)), 'Argument arg3.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg3, 0, 8))')"
    seq_04:"    assert((2 == tir.tvm_struct_get(arg3, 0, 10)), 'Argument arg3.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg3, 0, 10))')"
    seq_05:"     assert((dev_id == tir.tvm_struct_get(arg3, 0, 9)), 'Argument arg3.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg3, 0, 9))')"
    seq_06:"      tir.tvm_struct_set(stack_value, 0, 12, int64(2))"
    seq_07:"       stack_tcode[0] = 0"
    seq_08:"        tir.tvm_struct_set(stack_value, 1, 12, int64(dev_id))"
    seq_09:"         stack_tcode[1] = 0"
  }
}
layer {
  name:"Node_105"
  type:"assert"
  top:"Node_105"
  bottom:"Node_104"
  layer_param {
    idx:105
    condition:"(1000 == cast(int32, (int64*)arg3.shape: handle[1]))"
    message:"'Argument arg3.shape[1] has an unsatisfied constraint: (1000 == int32(arg3.shape[1]))'"
  }
}
layer {
  name:"Node_106"
  type:"assert"
  top:"Node_106"
  bottom:"Node_105"
  layer_param {
    idx:106
    condition:"(1 == cast(int32, (int64*)arg3.shape: handle[0]))"
    message:"'Argument arg3.shape[0] has an unsatisfied constraint: (1 == int32(arg3.shape[0]))'"
  }
}
layer {
  name:"Node_107"
  type:"assert"
  top:"Node_107"
  bottom:"Node_106"
  layer_param {
    idx:107
    condition:"(((@tir.tvm_struct_get(arg3: handle, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg3, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg3, 0, 7, dtype=uint16) == 1u16))"
    message:"'arg3.dtype is expected to be float32'"
  }
}
layer {
  name:"Node_108"
  type:"assert"
  top:"Node_108"
  bottom:"Node_107"
  layer_param {
    idx:108
    condition:"(2 == @tir.tvm_struct_get(arg3: handle, 0, 4, dtype=int32))"
    message:"'arg3.ndim is expected to equal 2'"
  }
}
layer {
  name:"Node_109"
  type:"assert"
  top:"Node_109"
  bottom:"Node_108"
  layer_param {
    idx:109
    condition:"(2 == @tir.tvm_struct_get(arg3: handle, 0, 4, dtype=int32))"
    message:"'arg3.ndim is expected to equal 2'"
  }
}
layer {
  name:"Node_110"
  type:"assert"
  top:"Node_110"
  bottom:"Node_109"
  layer_param {
    idx:110
    condition:"(dev_id: int32 == @tir.tvm_struct_get(arg2: handle, 0, 9, dtype=int32))"
    message:"'Argument arg2.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg2, 0, 9))'"
  }
}
layer {
  name:"Node_111"
  type:"assert"
  top:"Node_111"
  bottom:"Node_110"
  layer_param {
    idx:111
    condition:"(2 == @tir.tvm_struct_get(arg2: handle, 0, 10, dtype=int32))"
    message:"'Argument arg2.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg2, 0, 10))'"
  }
}
layer {
  name:"Node_112"
  type:"assert(seq_1)"
  top:"Node_112"
  bottom:"Node_111"
  layer_param {
    idx:112
    condition:"(0u64 == @tir.tvm_struct_get(arg2: handle, 0, 8, dtype=uint64))"
    message:"'Argument arg2.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg2, 0, 8))'"
  }
}
layer {
  name:"Node_113"
  type:"seq"
  top:"Node_113"
  bottom:"Node_59"
  bottom:"Node_112"
  layer_param {
    idx:113
    seq_00:"[if (!tir.isnullptr(arg2.strides))"
    seq_01:" assert((1 == int32(arg2.strides[0])), 'arg2.strides: expected to be compact array')"
    seq_02:"  0"
    seq_03:"   , assert(((uint64)0 == tir.tvm_struct_get(arg2, 0, 8)), 'Argument arg2.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg2, 0, 8))')"
    seq_04:"    assert((2 == tir.tvm_struct_get(arg2, 0, 10)), 'Argument arg2.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg2, 0, 10))')"
    seq_05:"     assert((dev_id == tir.tvm_struct_get(arg2, 0, 9)), 'Argument arg2.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg2, 0, 9))')"
    seq_06:"      assert((2 == tir.tvm_struct_get(arg3, 0, 4)), 'arg3.ndim is expected to equal 2')"
    seq_07:"       assert((2 == tir.tvm_struct_get(arg3, 0, 4)), 'arg3.ndim is expected to equal 2')"
    seq_08:"        assert((((tir.tvm_struct_get(arg3, 0, 5) == (uint8)2) && (tir.tvm_struct_get(arg3, 0, 6) == (uint8)32)) && (tir.tvm_struct_get(arg3, 0, 7) == (uint16)1)), 'arg3.dtype is expected to be float32')"
    seq_09:"         assert((1 == int32(arg3.shape[0])), 'Argument arg3.shape[0] has an unsatisfied constraint: (1 == int32(arg3.shape[0]))')"
  }
}
layer {
  name:"Node_114"
  type:"assert"
  top:"Node_114"
  bottom:"Node_113"
  layer_param {
    idx:114
    condition:"(1000 == cast(int32, (int64*)arg2.shape: handle[0]))"
    message:"'Argument arg2.shape[0] has an unsatisfied constraint: (1000 == int32(arg2.shape[0]))'"
  }
}
layer {
  name:"Node_115"
  type:"assert"
  top:"Node_115"
  bottom:"Node_114"
  layer_param {
    idx:115
    condition:"(((@tir.tvm_struct_get(arg2: handle, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg2, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg2, 0, 7, dtype=uint16) == 1u16))"
    message:"'arg2.dtype is expected to be float32'"
  }
}
layer {
  name:"Node_116"
  type:"assert"
  top:"Node_116"
  bottom:"Node_115"
  layer_param {
    idx:116
    condition:"(1 == @tir.tvm_struct_get(arg2: handle, 0, 4, dtype=int32))"
    message:"'arg2.ndim is expected to equal 1'"
  }
}
layer {
  name:"Node_117"
  type:"assert"
  top:"Node_117"
  bottom:"Node_116"
  layer_param {
    idx:117
    condition:"(1 == @tir.tvm_struct_get(arg2: handle, 0, 4, dtype=int32))"
    message:"'arg2.ndim is expected to equal 1'"
  }
}
layer {
  name:"Node_118"
  type:"assert"
  top:"Node_118"
  bottom:"Node_117"
  layer_param {
    idx:118
    condition:"(dev_id: int32 == @tir.tvm_struct_get(arg1: handle, 0, 9, dtype=int32))"
    message:"'Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))'"
  }
}
layer {
  name:"Node_119"
  type:"assert"
  top:"Node_119"
  bottom:"Node_118"
  layer_param {
    idx:119
    condition:"(2 == @tir.tvm_struct_get(arg1: handle, 0, 10, dtype=int32))"
    message:"'Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))'"
  }
}
layer {
  name:"Node_120"
  type:"assert(seq_1)"
  top:"Node_120"
  bottom:"Node_119"
  layer_param {
    idx:120
    condition:"(0u64 == @tir.tvm_struct_get(arg1: handle, 0, 8, dtype=uint64))"
    message:"'Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))'"
  }
}
layer {
  name:"Node_121"
  type:"seq"
  top:"Node_121"
  bottom:"Node_56"
  bottom:"Node_120"
  layer_param {
    idx:121
    seq_00:"[if (!tir.isnullptr(arg1.strides))"
    seq_01:" assert(((1 == int32(arg1.strides[1])) && (512 == int32(arg1.strides[0]))), 'arg1.strides: expected to be compact array')"
    seq_02:"  0"
    seq_03:"   , assert(((uint64)0 == tir.tvm_struct_get(arg1, 0, 8)), 'Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))')"
    seq_04:"    assert((2 == tir.tvm_struct_get(arg1, 0, 10)), 'Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))')"
    seq_05:"     assert((dev_id == tir.tvm_struct_get(arg1, 0, 9)), 'Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))')"
    seq_06:"      assert((1 == tir.tvm_struct_get(arg2, 0, 4)), 'arg2.ndim is expected to equal 1')"
    seq_07:"       assert((1 == tir.tvm_struct_get(arg2, 0, 4)), 'arg2.ndim is expected to equal 1')"
    seq_08:"        assert((((tir.tvm_struct_get(arg2, 0, 5) == (uint8)2) && (tir.tvm_struct_get(arg2, 0, 6) == (uint8)32)) && (tir.tvm_struct_get(arg2, 0, 7) == (uint16)1)), 'arg2.dtype is expected to be float32')"
    seq_09:"         assert((1000 == int32(arg2.shape[0])), 'Argument arg2.shape[0] has an unsatisfied constraint: (1000 == int32(arg2.shape[0]))')"
  }
}
layer {
  name:"Node_122"
  type:"assert"
  top:"Node_122"
  bottom:"Node_121"
  layer_param {
    idx:122
    condition:"(512 == cast(int32, (int64*)arg1.shape: handle[1]))"
    message:"'Argument arg1.shape[1] has an unsatisfied constraint: (512 == int32(arg1.shape[1]))'"
  }
}
layer {
  name:"Node_123"
  type:"assert"
  top:"Node_123"
  bottom:"Node_122"
  layer_param {
    idx:123
    condition:"(1000 == cast(int32, (int64*)arg1.shape: handle[0]))"
    message:"'Argument arg1.shape[0] has an unsatisfied constraint: (1000 == int32(arg1.shape[0]))'"
  }
}
layer {
  name:"Node_124"
  type:"assert"
  top:"Node_124"
  bottom:"Node_123"
  layer_param {
    idx:124
    condition:"(((@tir.tvm_struct_get(arg1: handle, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16))"
    message:"'arg1.dtype is expected to be float32'"
  }
}
layer {
  name:"Node_125"
  type:"assert"
  top:"Node_125"
  bottom:"Node_124"
  layer_param {
    idx:125
    condition:"(2 == @tir.tvm_struct_get(arg1: handle, 0, 4, dtype=int32))"
    message:"'arg1.ndim is expected to equal 2'"
  }
}
layer {
  name:"Node_126"
  type:"assert"
  top:"Node_126"
  bottom:"Node_125"
  layer_param {
    idx:126
    condition:"(2 == @tir.tvm_struct_get(arg1: handle, 0, 4, dtype=int32))"
    message:"'arg1.ndim is expected to equal 2'"
  }
}
layer {
  name:"Node_127"
  type:"assert"
  top:"Node_127"
  bottom:"Node_126"
  layer_param {
    idx:127
    condition:"(2 == @tir.tvm_struct_get(arg0: handle, 0, 10, dtype=int32))"
    message:"'Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))'"
  }
}
layer {
  name:"Node_128"
  type:"assert(seq_1)"
  top:"Node_128"
  bottom:"Node_127"
  layer_param {
    idx:128
    condition:"(0u64 == @tir.tvm_struct_get(arg0: handle, 0, 8, dtype=uint64))"
    message:"'Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))'"
  }
}
layer {
  name:"Node_129"
  type:"seq"
  top:"Node_129"
  bottom:"Node_53"
  bottom:"Node_128"
  layer_param {
    idx:129
    seq_00:"[if (!tir.isnullptr(arg0.strides))"
    seq_01:" assert(((1 == int32(arg0.strides[1])) && (512 == int32(arg0.strides[0]))), 'arg0.strides: expected to be compact array')"
    seq_02:"  0"
    seq_03:"   , assert(((uint64)0 == tir.tvm_struct_get(arg0, 0, 8)), 'Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))')"
    seq_04:"    assert((2 == tir.tvm_struct_get(arg0, 0, 10)), 'Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))')"
    seq_05:"     assert((2 == tir.tvm_struct_get(arg1, 0, 4)), 'arg1.ndim is expected to equal 2')"
    seq_06:"      assert((2 == tir.tvm_struct_get(arg1, 0, 4)), 'arg1.ndim is expected to equal 2')"
    seq_07:"       assert((((tir.tvm_struct_get(arg1, 0, 5) == (uint8)2) && (tir.tvm_struct_get(arg1, 0, 6) == (uint8)32)) && (tir.tvm_struct_get(arg1, 0, 7) == (uint16)1)), 'arg1.dtype is expected to be float32')"
    seq_08:"        assert((1000 == int32(arg1.shape[0])), 'Argument arg1.shape[0] has an unsatisfied constraint: (1000 == int32(arg1.shape[0]))')"
    seq_09:"         assert((512 == int32(arg1.shape[1])), 'Argument arg1.shape[1] has an unsatisfied constraint: (512 == int32(arg1.shape[1]))')"
  }
}
layer {
  name:"Node_130"
  type:"assert"
  top:"Node_130"
  bottom:"Node_129"
  layer_param {
    idx:130
    condition:"(512 == cast(int32, (int64*)arg0.shape: handle[1]))"
    message:"'Argument arg0.shape[1] has an unsatisfied constraint: (512 == int32(arg0.shape[1]))'"
  }
}
layer {
  name:"Node_131"
  type:"assert"
  top:"Node_131"
  bottom:"Node_130"
  layer_param {
    idx:131
    condition:"(1 == cast(int32, (int64*)arg0.shape: handle[0]))"
    message:"'Argument arg0.shape[0] has an unsatisfied constraint: (1 == int32(arg0.shape[0]))'"
  }
}
layer {
  name:"Node_132"
  type:"assert"
  top:"Node_132"
  bottom:"Node_131"
  layer_param {
    idx:132
    condition:"(((@tir.tvm_struct_get(arg0: handle, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16))"
    message:"'arg0.dtype is expected to be float32'"
  }
}
layer {
  name:"Node_133"
  type:"assert"
  top:"Node_133"
  bottom:"Node_132"
  layer_param {
    idx:133
    condition:"(2 == @tir.tvm_struct_get(arg0: handle, 0, 4, dtype=int32))"
    message:"'arg0.ndim is expected to equal 2'"
  }
}
layer {
  name:"Node_134"
  type:"assert"
  top:"Node_134"
  bottom:"Node_133"
  layer_param {
    idx:134
    condition:"(2 == @tir.tvm_struct_get(arg0: handle, 0, 4, dtype=int32))"
    message:"'arg0.ndim is expected to equal 2'"
  }
}
layer {
  name:"Node_135"
  type:"assert"
  top:"Node_135"
  bottom:"Node_134"
  layer_param {
    idx:135
    condition:"((((arg3.code: int32 == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4))"
    message:"'fused_nn_dense_add: Expect arg[3] to be pointer'"
  }
}
layer {
  name:"Node_136"
  type:"assert"
  top:"Node_136"
  bottom:"Node_135"
  layer_param {
    idx:136
    condition:"((((arg2.code: int32 == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4))"
    message:"'fused_nn_dense_add: Expect arg[2] to be pointer'"
  }
}
layer {
  name:"Node_137"
  type:"assert"
  top:"Node_137"
  bottom:"Node_136"
  layer_param {
    idx:137
    condition:"((((arg1.code: int32 == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4))"
    message:"'fused_nn_dense_add: Expect arg[1] to be pointer'"
  }
}
layer {
  name:"Node_138"
  type:"assert"
  top:"Node_138"
  bottom:"Node_137"
  layer_param {
    idx:138
    condition:"((((arg0.code: int32 == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4))"
    message:"'fused_nn_dense_add: Expect arg[0] to be pointer'"
  }
}
layer {
  name:"Node_139"
  type:"let"
  top:"Node_139"
  bottom:"arg3.strides"
  bottom:"Node_50"
  bottom:"Node_138"
  layer_param {
    idx:139
  }
}
layer {
  name:"Node_140"
  type:"let"
  top:"Node_140"
  bottom:"arg3.shape"
  bottom:"Node_48"
  bottom:"Node_139"
  layer_param {
    idx:140
  }
}
layer {
  name:"Node_141"
  type:"attribute"
  top:"Node_141"
  bottom:"T_add"
  bottom:"Node_140"
  layer_param {
    idx:141
    attr_key:storage_alignment
    body_00:"let arg3.shape = tir.tvm_struct_get(arg3, 0, 2)"
    body_01:" let arg3.strides = tir.tvm_struct_get(arg3, 0, 3)"
    body_02:"  assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), 'fused_nn_dense_add: Expect arg[0] to be pointer')"
    body_03:"   assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), 'fused_nn_dense_add: Expect arg[1] to be pointer')"
    body_04:"    assert(((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), 'fused_nn_dense_add: Expect arg[2] to be pointer')"
    body_05:"     assert(((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), 'fused_nn_dense_add: Expect arg[3] to be pointer')"
    body_06:"      assert((2 == tir.tvm_struct_get(arg0, 0, 4)), 'arg0.ndim is expected to equal 2')"
    body_07:"       assert((2 == tir.tvm_struct_get(arg0, 0, 4)), 'arg0.ndim is expected to equal 2')"
    body_08:"        assert((((tir.tvm_struct_get(arg0, 0, 5) == (uint8)2) && (tir.tvm_struct_get(arg0, 0, 6) == (uint8)32)) && (tir.tvm_struct_get(arg0, 0, 7) == (uint16)1)), 'arg0.dtype is expected to be float32')"
    body_09:"         assert((1 == int32(arg0.shape[0])), 'Argument arg0.shape[0] has an unsatisfied constraint: (1 == int32(arg0.shape[0]))')"
    value:"128"
  }
}
layer {
  name:"Node_142"
  type:"let"
  top:"Node_142"
  bottom:"T_add"
  bottom:"Node_46"
  bottom:"Node_141"
  layer_param {
    idx:142
  }
}
layer {
  name:"Node_143"
  type:"let"
  top:"Node_143"
  bottom:"arg2.strides"
  bottom:"Node_44"
  bottom:"Node_142"
  layer_param {
    idx:143
  }
}
layer {
  name:"Node_144"
  type:"let"
  top:"Node_144"
  bottom:"arg2.shape"
  bottom:"Node_42"
  bottom:"Node_143"
  layer_param {
    idx:144
  }
}
layer {
  name:"Node_145"
  type:"attribute"
  top:"Node_145"
  bottom:"placeholder_2"
  bottom:"Node_144"
  layer_param {
    idx:145
    attr_key:storage_alignment
    body_00:"let arg2.shape = tir.tvm_struct_get(arg2, 0, 2)"
    body_01:" let arg2.strides = tir.tvm_struct_get(arg2, 0, 3)"
    body_02:"  let T_add = tir.tvm_struct_get(arg3, 0, 1)"
    body_03:"   // attr [T_add] storage_alignment = 128"
    body_04:"   let arg3.shape = tir.tvm_struct_get(arg3, 0, 2)"
    body_05:"    let arg3.strides = tir.tvm_struct_get(arg3, 0, 3)"
    body_06:"     assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), 'fused_nn_dense_add: Expect arg[0] to be pointer')"
    body_07:"      assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), 'fused_nn_dense_add: Expect arg[1] to be pointer')"
    body_08:"       assert(((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), 'fused_nn_dense_add: Expect arg[2] to be pointer')"
    body_09:"        assert(((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), 'fused_nn_dense_add: Expect arg[3] to be pointer')"
    value:"128"
  }
}
layer {
  name:"Node_146"
  type:"let"
  top:"Node_146"
  bottom:"placeholder_2"
  bottom:"Node_40"
  bottom:"Node_145"
  layer_param {
    idx:146
  }
}
layer {
  name:"Node_147"
  type:"let"
  top:"Node_147"
  bottom:"arg1.strides"
  bottom:"Node_38"
  bottom:"Node_146"
  layer_param {
    idx:147
  }
}
layer {
  name:"Node_148"
  type:"let"
  top:"Node_148"
  bottom:"arg1.shape"
  bottom:"Node_36"
  bottom:"Node_147"
  layer_param {
    idx:148
  }
}
layer {
  name:"Node_149"
  type:"attribute"
  top:"Node_149"
  bottom:"placeholder_1"
  bottom:"Node_148"
  layer_param {
    idx:149
    attr_key:storage_alignment
    body_00:"let arg1.shape = tir.tvm_struct_get(arg1, 0, 2)"
    body_01:" let arg1.strides = tir.tvm_struct_get(arg1, 0, 3)"
    body_02:"  let placeholder = tir.tvm_struct_get(arg2, 0, 1)"
    body_03:"   // attr [placeholder] storage_alignment = 128"
    body_04:"   let arg2.shape = tir.tvm_struct_get(arg2, 0, 2)"
    body_05:"    let arg2.strides = tir.tvm_struct_get(arg2, 0, 3)"
    body_06:"     let T_add = tir.tvm_struct_get(arg3, 0, 1)"
    body_07:"      // attr [T_add] storage_alignment = 128"
    body_08:"      let arg3.shape = tir.tvm_struct_get(arg3, 0, 2)"
    body_09:"       let arg3.strides = tir.tvm_struct_get(arg3, 0, 3)"
    value:"128"
  }
}
layer {
  name:"Node_150"
  type:"let"
  top:"Node_150"
  bottom:"placeholder_1"
  bottom:"Node_34"
  bottom:"Node_149"
  layer_param {
    idx:150
  }
}
layer {
  name:"Node_151"
  type:"let"
  top:"Node_151"
  bottom:"dev_id"
  bottom:"Node_32"
  bottom:"Node_150"
  layer_param {
    idx:151
  }
}
layer {
  name:"Node_152"
  type:"let"
  top:"Node_152"
  bottom:"arg0.strides"
  bottom:"Node_30"
  bottom:"Node_151"
  layer_param {
    idx:152
  }
}
layer {
  name:"Node_153"
  type:"let"
  top:"Node_153"
  bottom:"arg0.shape"
  bottom:"Node_28"
  bottom:"Node_152"
  layer_param {
    idx:153
  }
}
layer {
  name:"Node_154"
  type:"attribute"
  top:"Node_154"
  bottom:"placeholder"
  bottom:"Node_153"
  layer_param {
    idx:154
    attr_key:storage_alignment
    body_00:"let arg0.shape = tir.tvm_struct_get(arg0, 0, 2)"
    body_01:" let arg0.strides = tir.tvm_struct_get(arg0, 0, 3)"
    body_02:"  let dev_id = tir.tvm_struct_get(arg0, 0, 9)"
    body_03:"   let placeholder = tir.tvm_struct_get(arg1, 0, 1)"
    body_04:"    // attr [placeholder] storage_alignment = 128"
    body_05:"    let arg1.shape = tir.tvm_struct_get(arg1, 0, 2)"
    body_06:"     let arg1.strides = tir.tvm_struct_get(arg1, 0, 3)"
    body_07:"      let placeholder = tir.tvm_struct_get(arg2, 0, 1)"
    body_08:"       // attr [placeholder] storage_alignment = 128"
    body_09:"       let arg2.shape = tir.tvm_struct_get(arg2, 0, 2)"
    value:"128"
  }
}
layer {
  name:"Node_155"
  type:"let"
  top:"Node_155"
  bottom:"placeholder"
  bottom:"Node_26"
  bottom:"Node_154"
  layer_param {
    idx:155
  }
}
layer {
  name:"Node_156"
  type:"let"
  top:"Node_156"
  bottom:"arg3.code"
  bottom:"Node_24"
  bottom:"Node_155"
  layer_param {
    idx:156
  }
}
layer {
  name:"Node_157"
  type:"let"
  top:"Node_157"
  bottom:"arg3"
  bottom:"Node_21"
  bottom:"Node_156"
  layer_param {
    idx:157
  }
}
layer {
  name:"Node_158"
  type:"let"
  top:"Node_158"
  bottom:"arg2.code"
  bottom:"Node_19"
  bottom:"Node_157"
  layer_param {
    idx:158
  }
}
layer {
  name:"Node_159"
  type:"let"
  top:"Node_159"
  bottom:"arg2"
  bottom:"Node_16"
  bottom:"Node_158"
  layer_param {
    idx:159
  }
}
layer {
  name:"Node_160"
  type:"let"
  top:"Node_160"
  bottom:"arg1.code"
  bottom:"Node_14"
  bottom:"Node_159"
  layer_param {
    idx:160
  }
}
layer {
  name:"Node_161"
  type:"let"
  top:"Node_161"
  bottom:"arg1"
  bottom:"Node_11"
  bottom:"Node_160"
  layer_param {
    idx:161
  }
}
layer {
  name:"Node_162"
  type:"let"
  top:"Node_162"
  bottom:"arg0.code"
  bottom:"Node_9"
  bottom:"Node_161"
  layer_param {
    idx:162
  }
}
layer {
  name:"Node_163"
  type:"let"
  top:"Node_163"
  bottom:"arg0"
  bottom:"Node_5"
  bottom:"Node_162"
  layer_param {
    idx:163
  }
}
layer {
  name:"Node_164"
  type:"assert"
  top:"Node_164"
  bottom:"Node_163"
  layer_param {
    idx:164
    condition:"(num_args: int32 == 4)"
    message:"'fused_nn_dense_add: num_args should be 4'"
  }
}
layer {
  name:"Node_165"
  type:"let"
  top:"Node_165"
  bottom:"stack_value"
  bottom:"Node_3"
  bottom:"Node_164"
  layer_param {
    idx:165
  }
}
layer {
  name:"Node_166"
  type:"let"
  top:"Node_166"
  bottom:"stack_tcode"
  bottom:"Node_1"
  bottom:"Node_165"
  layer_param {
    idx:166
  }
}
layer {
  name:"Node_167"
  type:"primfunc"
  top:"Node_167"
  bottom:"Node_166"
  layer_param {
    idx:167
    body_00:"let stack_tcode = tir.tvm_stack_alloca('arg_tcode', 8)"
    body_01:" let stack_value = tir.tvm_stack_alloca('arg_value', 8)"
    body_02:"  assert((num_args == 4), 'fused_nn_dense_add: num_args should be 4')"
    body_03:"   let arg0 = tir.tvm_struct_get(args, 0, 12)"
    body_04:"    let arg0.code = arg_type_ids[0]"
    body_05:"     let arg1 = tir.tvm_struct_get(args, 1, 12)"
    body_06:"      let arg1.code = arg_type_ids[1]"
    body_07:"       let arg2 = tir.tvm_struct_get(args, 2, 12)"
    body_08:"        let arg2.code = arg_type_ids[2]"
    body_09:"         let arg3 = tir.tvm_struct_get(args, 3, 12)"
  }
}
